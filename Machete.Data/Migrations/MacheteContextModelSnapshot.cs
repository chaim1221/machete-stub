// <auto-generated />
using System;
using Machete.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Machete.Data.Migrations
{
    [DbContext(typeof(MacheteContext))]
    partial class MacheteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Machete.Data.MacheteUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<Guid>("ApplicationId");

                    b.Property<string>("Comment");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("FailedPasswordAnswerAttemptCount");

                    b.Property<DateTime>("FailedPasswordAnswerAttemptWindowStart");

                    b.Property<int>("FailedPasswordAttemptCount");

                    b.Property<DateTime>("FailedPasswordAttemptWindowStart");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsAnonymous");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsLockedOut");

                    b.Property<DateTime>("LastActivityDate");

                    b.Property<DateTime>("LastLockoutDate");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastPasswordChangedDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("LoweredEmail");

                    b.Property<string>("LoweredUserName");

                    b.Property<string>("MobileAlias");

                    b.Property<string>("MobilePIN");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordAnswer");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordQuestion");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Machete.Domain.Activity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("dateEnd");

                    b.Property<DateTime>("dateStart");

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<int>("firstID");

                    b.Property<string>("nameEN")
                        .HasMaxLength(50);

                    b.Property<string>("nameES")
                        .HasMaxLength(50);

                    b.Property<int>("nameID")
                        .HasColumnName("name");

                    b.Property<string>("notes")
                        .HasMaxLength(4000);

                    b.Property<bool>("recurring");

                    b.Property<string>("teacher")
                        .IsRequired();

                    b.Property<string>("typeEN")
                        .HasMaxLength(50);

                    b.Property<string>("typeES")
                        .HasMaxLength(50);

                    b.Property<int>("typeID")
                        .HasColumnName("type");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Machete.Domain.ActivitySignin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("activityID");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateforsignin");

                    b.Property<DateTime>("dateupdated");

                    b.Property<int>("dwccardnum");

                    b.Property<int?>("memberStatusID")
                        .HasColumnName("memberStatus");

                    b.Property<int?>("personID");

                    b.Property<double>("timeZoneOffset");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("activityID");

                    b.HasIndex("personID");

                    b.ToTable("ActivitySignins");
                });

            modelBuilder.Entity("Machete.Domain.Config", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("category");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("description");

                    b.Property<string>("key")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("publicConfig");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<string>("value")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.HasKey("ID");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("Machete.Domain.Email", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("attachment");

                    b.Property<string>("attachmentContentType");

                    b.Property<string>("body")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasMaxLength(8000);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("emailFrom")
                        .HasMaxLength(50);

                    b.Property<string>("emailTo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("lastAttempt");

                    b.Property<int>("statusID");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("transmitAttempts");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("Machete.Domain.Employer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active");

                    b.Property<string>("address1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("address2")
                        .HasMaxLength(50);

                    b.Property<bool?>("blogparticipate");

                    b.Property<bool>("business");

                    b.Property<string>("businessname");

                    b.Property<string>("cellphone")
                        .HasMaxLength(12);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("driverslicense")
                        .HasMaxLength(30);

                    b.Property<string>("email")
                        .HasMaxLength(50);

                    b.Property<string>("fax")
                        .HasMaxLength(12);

                    b.Property<bool?>("isOnlineProfileComplete");

                    b.Property<string>("licenseplate")
                        .HasMaxLength(10);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("notes")
                        .HasMaxLength(4000);

                    b.Property<string>("onlineSigninID")
                        .HasMaxLength(128);

                    b.Property<bool>("onlineSource");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<bool>("receiveUpdates");

                    b.Property<int?>("referredby");

                    b.Property<string>("referredbyOther")
                        .HasMaxLength(50);

                    b.Property<bool>("returnCustomer");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<string>("zipcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("Machete.Domain.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonID");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("dateFrom");

                    b.Property<DateTime?>("dateTo");

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("eventTypeEN")
                        .HasMaxLength(50);

                    b.Property<string>("eventTypeES")
                        .HasMaxLength(50);

                    b.Property<int>("eventTypeID")
                        .HasColumnName("eventType");

                    b.Property<string>("notes")
                        .HasMaxLength(4000);

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Machete.Domain.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageData");

                    b.Property<string>("ImageMimeType")
                        .HasMaxLength(30);

                    b.Property<byte[]>("Thumbnail");

                    b.Property<string>("ThumbnailMimeType")
                        .HasMaxLength(30);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("filename")
                        .HasMaxLength(255);

                    b.Property<string>("parenttable")
                        .HasMaxLength(30);

                    b.Property<string>("recordkey")
                        .HasMaxLength(20);

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Machete.Domain.JoinEventImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventID");

                    b.Property<int>("ImageID");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.HasIndex("ImageID")
                        .IsUnique();

                    b.ToTable("JoinEventImage");
                });

            modelBuilder.Entity("Machete.Domain.Lookup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("emailTemplate")
                        .HasColumnType("nvarchar(MAX)")
                        .HasMaxLength(8000);

                    b.Property<bool?>("fixedJob");

                    b.Property<string>("key")
                        .HasMaxLength(30);

                    b.Property<int?>("level");

                    b.Property<string>("ltrCode")
                        .HasMaxLength(3);

                    b.Property<int?>("minHour");

                    b.Property<double?>("minimumCost");

                    b.Property<bool>("selected");

                    b.Property<string>("skillDescriptionEn")
                        .HasMaxLength(300);

                    b.Property<string>("skillDescriptionEs")
                        .HasMaxLength(300);

                    b.Property<int?>("sortorder");

                    b.Property<bool>("speciality");

                    b.Property<string>("subcategory")
                        .HasMaxLength(20);

                    b.Property<string>("text_EN")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("text_ES")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("typeOfWorkID");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<double?>("wage");

                    b.HasKey("ID");

                    b.ToTable("Lookups");
                });

            modelBuilder.Entity("Machete.Domain.Person", b =>
                {
                    b.Property<int>("ID");

                    b.Property<bool>("active");

                    b.Property<string>("address1")
                        .HasMaxLength(50);

                    b.Property<string>("address2")
                        .HasMaxLength(50);

                    b.Property<string>("cellphone")
                        .HasMaxLength(12);

                    b.Property<string>("city")
                        .HasMaxLength(25);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("email")
                        .HasMaxLength(50);

                    b.Property<string>("facebook")
                        .HasMaxLength(50);

                    b.Property<string>("firstname1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("firstname2")
                        .HasMaxLength(50);

                    b.Property<string>("fullName");

                    b.Property<int>("gender");

                    b.Property<string>("genderother")
                        .HasMaxLength(20);

                    b.Property<string>("lastname1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("lastname2")
                        .HasMaxLength(50);

                    b.Property<string>("nickname")
                        .HasMaxLength(50);

                    b.Property<string>("phone")
                        .HasMaxLength(12);

                    b.Property<string>("state")
                        .HasMaxLength(2);

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<string>("zipcode")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Machete.Domain.ReportDefinition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("category");

                    b.Property<string>("columnsJson");

                    b.Property<string>("commonName");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("description");

                    b.Property<string>("inputsJson");

                    b.Property<string>("name");

                    b.Property<string>("sqlquery");

                    b.Property<string>("subcategory");

                    b.Property<string>("title");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("ReportDefinitions");
                });

            modelBuilder.Entity("Machete.Domain.ScheduleRule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<int>("day");

                    b.Property<int>("leadHours");

                    b.Property<int>("maxEndMin");

                    b.Property<int>("minStartMin");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("ScheduleRules");
                });

            modelBuilder.Entity("Machete.Domain.TransportCostRule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("cost");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<int>("maxWorker");

                    b.Property<int>("minWorker");

                    b.Property<int>("transportRuleID");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("transportRuleID");

                    b.ToTable("TransportCostRules");
                });

            modelBuilder.Entity("Machete.Domain.TransportProvider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<bool>("defaultAttribute");

                    b.Property<string>("key")
                        .HasMaxLength(50);

                    b.Property<int?>("sortorder");

                    b.Property<string>("text_EN")
                        .HasMaxLength(50);

                    b.Property<string>("text_ES")
                        .HasMaxLength(50);

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("TransportProviders");
                });

            modelBuilder.Entity("Machete.Domain.TransportProviderAvailability", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("available");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<int>("day");

                    b.Property<string>("key")
                        .HasMaxLength(50);

                    b.Property<string>("lookupKey")
                        .HasMaxLength(50);

                    b.Property<int>("transportProviderID");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("transportProviderID");

                    b.ToTable("TransportProvidersAvailability");
                });

            modelBuilder.Entity("Machete.Domain.TransportRule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("key")
                        .HasMaxLength(50);

                    b.Property<string>("lookupKey")
                        .HasMaxLength(50);

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<string>("zipcodes")
                        .HasMaxLength(1000);

                    b.Property<string>("zoneLabel")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("TransportRules");
                });

            modelBuilder.Entity("Machete.Domain.WorkAssignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active");

                    b.Property<int>("attitude");

                    b.Property<string>("comments");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<int>("days");

                    b.Property<string>("description")
                        .HasMaxLength(1000);

                    b.Property<int>("englishLevelID");

                    b.Property<int>("followDirections");

                    b.Property<string>("fullWAID");

                    b.Property<int?>("hourRange");

                    b.Property<double>("hourlyWage");

                    b.Property<double>("hours");

                    b.Property<double>("maxEarnings");

                    b.Property<double>("minEarnings");

                    b.Property<int?>("pseudoID");

                    b.Property<int>("qualityOfWork");

                    b.Property<int>("reliability");

                    b.Property<string>("skillEN");

                    b.Property<string>("skillES");

                    b.Property<int>("skillID");

                    b.Property<double>("surcharge");

                    b.Property<double?>("transportCost");

                    b.Property<int>("transportProgram");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<bool?>("weightLifted");

                    b.Property<int>("workOrderID");

                    b.Property<int?>("workerAssignedID");

                    b.Property<int?>("workerRating");

                    b.Property<string>("workerRatingComments")
                        .HasMaxLength(500);

                    b.Property<int?>("workerSigininID");

                    b.Property<int?>("workerSigninID");

                    b.HasKey("ID");

                    b.HasIndex("workOrderID");

                    b.HasIndex("workerAssignedID");

                    b.HasIndex("workerSigininID");

                    b.ToTable("WorkAssignments");
                });

            modelBuilder.Entity("Machete.Domain.Worker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ImageID");

                    b.Property<int?>("RaceID");

                    b.Property<bool?>("active");

                    b.Property<int?>("americanBornChildren");

                    b.Property<bool?>("carinsurance");

                    b.Property<int?>("countryoforiginID");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("dateOfBirth");

                    b.Property<DateTime>("dateOfMembership");

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime?>("dateinUSA");

                    b.Property<DateTime?>("dateinseattle");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("disabilitydesc")
                        .HasMaxLength(50);

                    b.Property<bool?>("disabled");

                    b.Property<bool?>("driverslicense");

                    b.Property<int>("dwccardnum");

                    b.Property<int?>("educationLevel");

                    b.Property<string>("emcontUSAname")
                        .HasMaxLength(50);

                    b.Property<string>("emcontUSAphone")
                        .HasMaxLength(14);

                    b.Property<string>("emcontUSArelation")
                        .HasMaxLength(30);

                    b.Property<string>("emcontoriginname")
                        .HasMaxLength(50);

                    b.Property<string>("emcontoriginphone")
                        .HasMaxLength(14);

                    b.Property<string>("emcontoriginrelation")
                        .HasMaxLength(30);

                    b.Property<int>("englishlevelID");

                    b.Property<int?>("farmLaborCharacteristics");

                    b.Property<string>("fullNameAndID")
                        .HasMaxLength(100);

                    b.Property<bool?>("healthInsurance");

                    b.Property<DateTime?>("healthInsuranceDate");

                    b.Property<string>("height")
                        .HasMaxLength(50);

                    b.Property<bool?>("homeless");

                    b.Property<int?>("housingType");

                    b.Property<bool?>("immigrantrefugee");

                    b.Property<int?>("incomeID");

                    b.Property<int?>("incomeSourceID");

                    b.Property<DateTime?>("insuranceexpiration");

                    b.Property<string>("introToCenter")
                        .HasMaxLength(1000);

                    b.Property<double?>("lastPaymentAmount");

                    b.Property<DateTime?>("lastPaymentDate");

                    b.Property<bool?>("lgbtq");

                    b.Property<DateTime?>("licenseexpirationdate");

                    b.Property<string>("liveWithDescription")
                        .HasMaxLength(1000);

                    b.Property<bool?>("liveWithSpouse");

                    b.Property<bool?>("livealone");

                    b.Property<bool?>("livewithchildren");

                    b.Property<int?>("maritalstatus");

                    b.Property<DateTime?>("memberReactivateDate");

                    b.Property<string>("memberStatusEN")
                        .HasMaxLength(50);

                    b.Property<string>("memberStatusES")
                        .HasMaxLength(50);

                    b.Property<int>("memberStatusID")
                        .HasColumnName("memberStatus");

                    b.Property<DateTime>("memberexpirationdate");

                    b.Property<int?>("neighborhoodID");

                    b.Property<int?>("numChildrenUnder18");

                    b.Property<int?>("numofchildren");

                    b.Property<bool?>("ownTools");

                    b.Property<string>("raceother")
                        .HasMaxLength(20);

                    b.Property<bool?>("recentarrival");

                    b.Property<int?>("skill1");

                    b.Property<int?>("skill2");

                    b.Property<int?>("skill3");

                    b.Property<string>("skillCodes");

                    b.Property<string>("typeOfWork");

                    b.Property<int>("typeOfWorkID");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<bool?>("usVeteran");

                    b.Property<int?>("vehicleTypeID");

                    b.Property<double?>("wageTheftRecoveryAmount");

                    b.Property<bool?>("wageTheftVictim");

                    b.Property<string>("weight")
                        .HasMaxLength(10);

                    b.Property<float?>("workerRating");

                    b.HasKey("ID");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Machete.Domain.WorkerRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("WorkOrderID");

                    b.Property<int>("WorkerID");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("WorkOrderID");

                    b.HasIndex("WorkerID");

                    b.ToTable("WorkerRequests");
                });

            modelBuilder.Entity("Machete.Domain.WorkerSignin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("WorkAssignmentID");

                    b.Property<int?>("WorkerID");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateforsignin");

                    b.Property<DateTime>("dateupdated");

                    b.Property<int>("dwccardnum");

                    b.Property<int?>("lottery_sequence");

                    b.Property<DateTime?>("lottery_timestamp");

                    b.Property<int?>("memberStatusID")
                        .HasColumnName("memberStatus");

                    b.Property<double>("timeZoneOffset");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("WorkerID");

                    b.ToTable("WorkerSignins");
                });

            modelBuilder.Entity("Machete.Domain.WorkOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmailID");

                    b.Property<int>("EmployerID");

                    b.Property<string>("additionalNotes")
                        .HasMaxLength(1000);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("contactName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("dateTimeofWork");

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("description")
                        .HasMaxLength(4000);

                    b.Property<bool?>("disclosureAgreement");

                    b.Property<bool>("englishRequired");

                    b.Property<string>("englishRequiredNote")
                        .HasMaxLength(100);

                    b.Property<bool>("lunchSupplied");

                    b.Property<bool>("onlineSource");

                    b.Property<int?>("paperOrderNum");

                    b.Property<bool>("permanentPlacement");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<double?>("ppFee");

                    b.Property<string>("ppPayerID")
                        .HasMaxLength(25);

                    b.Property<string>("ppPaymentID")
                        .HasMaxLength(50);

                    b.Property<string>("ppPaymentToken")
                        .HasMaxLength(25);

                    b.Property<string>("ppResponse")
                        .HasMaxLength(5000);

                    b.Property<string>("ppState")
                        .HasMaxLength(20);

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("statusEN")
                        .HasMaxLength(50);

                    b.Property<string>("statusES")
                        .HasMaxLength(50);

                    b.Property<int>("statusID")
                        .HasColumnName("status");

                    b.Property<bool>("timeFlexible");

                    b.Property<double>("timeZoneOffset");

                    b.Property<double>("transportFee");

                    b.Property<double>("transportFeeExtra");

                    b.Property<string>("transportMethodEN");

                    b.Property<string>("transportMethodES");

                    b.Property<int>("transportMethodID");

                    b.Property<int>("transportProviderID");

                    b.Property<string>("transportTransactID")
                        .HasMaxLength(50);

                    b.Property<int?>("transportTransactType");

                    b.Property<int>("typeOfWorkID");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<int>("waPseudoIDCounter");

                    b.Property<string>("workSiteAddress1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("workSiteAddress2")
                        .HasMaxLength(50);

                    b.Property<string>("zipcode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.HasIndex("EmailID");

                    b.HasIndex("EmployerID");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Machete.Domain.ActivitySignin", b =>
                {
                    b.HasOne("Machete.Domain.Activity", "Activity")
                        .WithMany("Signins")
                        .HasForeignKey("activityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Domain.Person", "person")
                        .WithMany()
                        .HasForeignKey("personID");
                });

            modelBuilder.Entity("Machete.Domain.Event", b =>
                {
                    b.HasOne("Machete.Domain.Person", "Person")
                        .WithMany("Events")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.JoinEventImage", b =>
                {
                    b.HasOne("Machete.Domain.Event", "Event")
                        .WithMany("JoinEventImages")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Domain.Image", "Image")
                        .WithOne()
                        .HasForeignKey("Machete.Domain.JoinEventImage", "ImageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.Person", b =>
                {
                    b.HasOne("Machete.Domain.Worker", "Worker")
                        .WithOne("Person")
                        .HasForeignKey("Machete.Domain.Person", "ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.TransportCostRule", b =>
                {
                    b.HasOne("Machete.Domain.TransportRule", "transportRule")
                        .WithMany("costRules")
                        .HasForeignKey("transportRuleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.TransportProviderAvailability", b =>
                {
                    b.HasOne("Machete.Domain.TransportProvider", "Provider")
                        .WithMany("AvailabilityRules")
                        .HasForeignKey("transportProviderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.WorkAssignment", b =>
                {
                    b.HasOne("Machete.Domain.WorkOrder", "workOrder")
                        .WithMany("workAssignments")
                        .HasForeignKey("workOrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Domain.Worker", "workerAssigned")
                        .WithMany("workAssignments")
                        .HasForeignKey("workerAssignedID");

                    b.HasOne("Machete.Domain.WorkerSignin", "workerSiginin")
                        .WithMany()
                        .HasForeignKey("workerSigininID");
                });

            modelBuilder.Entity("Machete.Domain.WorkerRequest", b =>
                {
                    b.HasOne("Machete.Domain.WorkOrder", "workOrder")
                        .WithMany("workerRequests")
                        .HasForeignKey("WorkOrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Domain.Worker", "workerRequested")
                        .WithMany()
                        .HasForeignKey("WorkerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.WorkerSignin", b =>
                {
                    b.HasOne("Machete.Domain.Worker", "worker")
                        .WithMany("workersignins")
                        .HasForeignKey("WorkerID");
                });

            modelBuilder.Entity("Machete.Domain.WorkOrder", b =>
                {
                    b.HasOne("Machete.Domain.Email")
                        .WithMany("WorkOrders")
                        .HasForeignKey("EmailID");

                    b.HasOne("Machete.Domain.Employer", "Employer")
                        .WithMany("WorkOrders")
                        .HasForeignKey("EmployerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Machete.Data.MacheteUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Machete.Data.MacheteUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Data.MacheteUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Machete.Data.MacheteUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
