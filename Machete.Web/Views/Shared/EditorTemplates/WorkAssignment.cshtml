@using Machete.Web.Helpers
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Localization

@using Machete.Web.Resources;

@model Machete.Web.ViewModel.WorkAssignment

@Html.HiddenFor(model => model.ID, new { @class = "hiddenRecID" })
@Html.HiddenFor(model => model.workOrderID)
@{
    string myStr = "";

    var httpContext = ViewContext.HttpContext;
    var currentCulture = httpContext.Features.Get<IRequestCultureFeature>().RequestCulture.UICulture;
    var currentUrl = UriHelper.BuildRelative(httpContext.Request.PathBase, httpContext.Request.Path, httpContext.Request.QueryString);

    string idPrefix = "WA" + Model.ID + "-";
}

<div class="tb-table">

    <div class="tb-row">
        @Html.mUITableLabelFor(model => model.englishLevelID)
        @Html.mUIDropDownListFor(model => model.englishLevelID, Model.def.skillLevels(), new {tabindex = "23", id = idPrefix + "englishLevelID"})
        @Html.mUITableLabelFor(model => model.skillID)
        <div class="tb-field">
            <select name="skillID" id=@(idPrefix + "skillID") 
                    data-val-required="A skill is required (use general labor if none was specified)" 
                    data-val-number="The field Skill must be a number." 
                    data-val="true"
                    tabindex="1"
                    class="valid"><option value="">@Shared.choose</option>
                @foreach (var item in Model.def.getSkill(specializedOnly: false))
                {
                    @*kludgy way to print selected or not. couldn't get other syntax to work*@
                    if (Model.skillID == Convert.ToInt16(item.Value))
                    {
                        <option value="@(item.Value)" 
                                wage="@(item.wage)" 
                                minHour="@(item.minHour)" 
                                fixedJob="@(item.fixedJob)" 
                                selected="selected">@item.Text</option>
                    }
                    else
                    {                                                
                        <option value="@(item.Value)" 
                                wage="@(item.wage)" 
                                minHour="@(item.minHour)" 
                                fixedJob="@(item.fixedJob)">@item.Text</option>
                    }
                } 
            </select>
            @Html.ValidationMessageFor(model => model.skillID)
        </div>
        @Html.mUITableLabelAndTextBoxFor(model => model.pseudoID, new { tabindex = "31", style = "width: 2em", @readonly = "readonly", id = idPrefix + "pseudoID" })
        @Html.mUITableLabelFor(model => model.weightLifted)
        @Html.mUIDropDownYesNoFor(model => model.weightLifted, Model.def.yesnoSelectList(), new { tabindex = "35", id = idPrefix + "weightLifted" })
    </div>
</div>
<div class="tb-table">
    <div class="tb-row">
        @Html.mUITableLabelFor(model => model.hourlyWage)
        <div class="tb-field">
            @Html.TextBox("hourlyWage", Html.Encode(String.Format("{0:f2}", Model.hourlyWage)), new { tabindex = "25", @class = "money-field earnings-part", min="1", id = idPrefix + "hourlyWage" })
            @Html.ValidationMessageFor(model => model.hourlyWage)
        </div>
        @Html.mUITableLabelFor(model => model.hours)
        <div class="tb-field">
            @Html.TextBox("hours", Html.Encode(String.Format("{0:f2}", Model.hours)), new { tabindex = "26", id = idPrefix + "hours", @class = "earnings-part", min="1", style = "width: 6em;" })
            @Html.ValidationMessageFor(model => model.hours)
        </div>

        @Html.mUITableLabelFor(model => model.hourRange)
        @Html.mUIDropDownListFor(model => model.hourRange, new SelectList(Model.def.hours(), "Value", "Text", Model.hourRange), new { tabindex = "27", id = idPrefix + "hourRange", @class = "earnings-part" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelFor(model => model.days)
        @Html.mUIDropDownListFor(model => model.days, new SelectList(Model.def.days(), "Value", "Text", Model.days), new { tabindex = "28", id = idPrefix + "days", @class = "earnings-part" })
        <div class="tb-label">
            @Html.Label("total", WorkAssignments.total)
        </div>
        <div class="tb-field">
            @Html.TextBox( idPrefix + "total", null, new { tabindex = "32", style = "width: 6em;"})
        </div>
        <div class="tb-label">
            @Html.Label("totalRange", WorkAssignments.totalRange)
        </div>
        <div class="tb-field">
            @Html.TextBox(idPrefix + "totalRange", null, new { tabindex = "33", style = "width: 6em;"})
        </div>
        @Html.mUITableLabelFor(model => model.surcharge)
        <div class="tb-field">
            @Html.TextBox("surcharge", Html.Encode(String.Format("{0:f2}", Model.surcharge)), new { tabindex = "29", @class = "money-field earnings-part", id = idPrefix + "surcharge" })
            @Html.ValidationMessageFor(model => model.surcharge)
        </div>
    </div>
</div>
<div class="tb-table">
    <div class="tb-row">
        <div class="tb-label desc-label">
            @Html.LabelFor(model => model.description)
        </div>
        <div class="tb-field desc-field">
            @*@Html.TextAreaFor("description", Model.description, new { style = "width: 40em; height: 4em;" })*@
            @Html.TextAreaFor(model => model.description, new { tabindex = "30", @class = "desc-field", id = idPrefix + "description" })
            @Html.ValidationMessageFor(model => model.description)
        </div>
    </div>
</div>
@if (Html.IsInRole(new[] { "Administrator", "Manager" }))
{
<div class="Accordion" id="dispatchAccordion">
    <h3><a href="#">@WorkAssignment.dispatchinfo</a></h3>
    <div class="tb-table">
        <div class="tb-row">
            @Html.mUITableLabelFor(model => model.workerAssignedID)
            <div class="tb-display">
                @Html.HiddenFor(model => model.workerAssignedID,
                    new { 
                       id="workerAssigned-" + Model.ID
                    })           
                @{                    
                    if (Model.workerAssigned != null)
                    {
                        myStr = Model.workerAssigned.dwccardnum + " " +
                                        Model.workerAssigned.Person.fullName;
                    }
                }
                @Html.TextBox("workerAssignedDisplay", 
                    myStr, 
                    new { 
                        style = "width: 20em",
                        disabled = "disabled",
                        id = "workerAssignedDisplay-" + Model.ID
                    })
             </div>
             <div class="tb-label">
                    <input type="button" value="@WorkAssignment.change" 
                            class="formButton" 
                            id="changeAssigned-@(Model.ID)"/>
                    <input type="button" value="@WorkAssignment.delete" 
                            class="formButton" 
                            id="deleteAssigned-@(Model.ID)"/>
             </div>
        </div>
    </div>
</div>
}

@Html.PartialAsync("ManagerInfo")

<script type="text/javascript">
    $(document).ready(function () {
        $('#changeAssigned-@(Model.ID)').click(function () {

            $('#workerTable').dataTable().fnDraw();
            $('#workerTable').show();
            //
            // TODO: remove global. ugly kludge.
            M_workerRequestHandler = function (myID, myLabel) {
                //
                //Anon function to handle doubleclick of record selector
                $('#workerAssigned-@(Model.ID)').val(myID);
                $('#workerAssignedDisplay-@(Model.ID)').val(myLabel);
                //$('#WorkAssignmentTab-@(Model.ID)').submit();
            }
            $("#workerDialog").dialog({
                    height: 340,
                    width: 1000,
                    modal: true
            });            
            $('#workerDialog').show();
        });
        //
        // Delete confirmation 
        $('#deleteAssigned-@(Model.ID)').click(function () {
            jConfirm('@WorkAssignment.deleteassignedconfirm',
                     '@WorkAssignment.deleteassignedtitle',
                     function (r) {
                         if (r == true) {
                            $('#workerAssigned-@(Model.ID)').val(null);
                             $('#workerAssignedDisplay-@(Model.ID)').val(null);
                             $('#waEditSubmitBtn-@(Model.ID)').click();
                         }
                     }
            );
        });
    });
</script>