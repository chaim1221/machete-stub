@using Machete.Domain
@using Machete.Web.Helpers
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Localization
@model Machete.Web.ViewModel.Activity

@using Machete.Web.Resources;

@{
    var httpContext = ViewContext.HttpContext;
    var currentCulture = httpContext.Features.Get<IRequestCultureFeature>().RequestCulture.UICulture;
    var currentUrl = UriHelper.BuildRelative(httpContext.Request.PathBase, httpContext.Request.Path, httpContext.Request.QueryString);

    string recType = "activity";
    string idPrefix = recType + Model.ID + "-";
}
@Html.HiddenFor(model => model.ID, new { @class = "hiddenRecID", id = idPrefix + "ID" })
@Html.HiddenFor(model => model.firstID, new { @class = "hiddenRecID", id = Model.firstID + "isFirstID" })
<div class="tb-table" style="float: left;">
    <div class="tb-row">
        <div class="tb-label">
            @Html.LabelFor(model => model.typeID)
        </div>
        <div class="tb-field">
            @Html.DropDownListFor(model => model.typeID,
                new SelectList(Model.def.getSelectList(LCategory.activityType), "Value", "Text", Model),
                Shared.choose, new { tabindex = "1", id = idPrefix + "type" })
            @Html.ValidationMessageFor(model => model.typeID);
        </div>
    </div>
    <div class="tb-row" id="className">
        <div class="tb-label">
            @Html.LabelFor(model => model.nameID)
        </div>
        <div class="tb-field">
            @Html.DropDownListFor(model => model.nameID,
                new SelectList(Model.def.getSelectList(LCategory.activityName), "Value", "Text", Model),
                Shared.choose, new { tabindex = "1", id = idPrefix + "name" })
            @Html.ValidationMessageFor(model => model.nameID);
        </div>
    </div>
    <div class="tb-row">
        <div class="tb-label">
            @Html.LabelFor(model => model.dateStart)
        </div>
        <div class="tb-field">
            @Html.TextBox("dateStart", Html.Encode(String.Format("{0:g}",
                Model.dateStart)),
                new { id = idPrefix + "dateStart" })
            @Html.ValidationMessageFor(model => model.dateStart)
        </div>
    </div>
    <div class="tb-row">
        <div class="tb-label">
            @Html.LabelFor(model => model.dateEnd)
        </div>
        <div class="tb-field">
            @Html.TextBox("dateEnd", Html.Encode(String.Format("{0:g}",
                Model.dateEnd)),
                new { id = idPrefix + "dateEnd" })
            @Html.ValidationMessageFor(model => model.dateEnd)
        </div>
    </div>
    @if (Html.IsInRole("Teacher") && !Html.IsInRole("Administrator", "Manager"))
    {
        Model.recurring = false;
    }
    else
    {
        <div class="tb-row">
            <div class="tb-label">
                @Html.LabelFor(model => model.recurring)
            </div>
            <div class="tb-field">
                @Html.CheckBox("recurring")
            </div>
        </div>
    }
    <div class="tb-row">
        <div class="tb-label">
            @Html.LabelFor(model => model.teacher)
        </div>
        <div class="tb-field">
            @Html.DropDownListFor(model => model.teacher,
                new SelectList(Model.def.getTeachers(), Model.teacher),
                Shared.choose,
                new { tabindex = "1", id = idPrefix + "teacher" })
        </div>
    </div>
</div>
<div class="tb-table" style="float: left;">
    <div class="tb-row">
        <div class="tb-label desc-label">
            @Html.LabelFor(model => model.notes)
        </div>
        <div class="tb-field desc-field">
            @Html.TextAreaFor(model => model.notes, new { tabindex = "3", @class = "desc-field", id = idPrefix + "notes" })
            @Html.ValidationMessageFor(model => model.notes)
        </div>
    </div>
</div>
<div style="clear: left;"></div>
@await Html.PartialAsync("ManagerInfo", Model)

<script type="text/javascript">
    $(document).ready(function () {
        $('#@(idPrefix)type').change(
            function () {
                if (
                    $('#@(idPrefix)type option:selected').val() == "@(Model.def.byKeys(LCategory.activityType, LActType.Assembly))" || 
                    $('#@(idPrefix)type option:selected').val() == "@(Model.def.byKeys(LCategory.activityType, LActType.OrgMtg))"
                   )
                {
                    $('#@(idPrefix)name').attr('disabled', 'disabled');
                    $('#className').hide();
                }
                else
                {
                    $('#className').show();
                    $('#@(idPrefix)name').removeAttr('disabled');
                }
            } 

        );

    $("#@(idPrefix)dateStart").datetimepicker({
        stepMinute: 15,
        ampm: true,
        hourMin: 6,
        hourMax: 21,
        minuteMin: 0,
        minuteMax: 45,
        minuteGrid: 15,
        hourGrid: 4
    });
    $("#@(idPrefix)dateEnd").datetimepicker({
        stepMinute: 15,
        ampm: true,
        hourMin: 8,
        hourMax: 23,
        minuteMin: 0,
        minuteMax: 45,
        minuteGrid: 15,
        hourGrid: 4
    });
    });
</script>